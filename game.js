// Generated by psc-bundle 0.9.1
var PS = {};
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  // module Data.Unit

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];        
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  exports["randomRange"] = randomRange;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Ref

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
    "use strict";

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn3"] = $foreign.runFn3;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var setCanvasDimensions = function (d) {
      return function (ce) {
          return Control_Bind.bind(Control_Monad_Eff.bindEff)($foreign.setCanvasHeight(d.height)(ce))($foreign.setCanvasWidth(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return Data_Function_Uncurried.runFn3($foreign.getCanvasElementByIdImpl)(elId)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["arc"] = $foreign.arc;
  exports["fill"] = $foreign.fill;
  exports["fillRect"] = $foreign.fillRect;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
    "use strict";

  //module Main

  exports.requestAnimationFrame = function(f) {
      return function() {
          window.requestAnimationFrame(function(dt) {
              f();
          });
      }
  };

  exports.onKeyChange = function(code) {
      //TODO Rewrite so there is only ever 1 handler
      return function(f) {
          return function() {
              document.addEventListener("keydown", function(e) {
                  if (e.keyCode == code) {
                      f(true)();
                  }
              }, false);
              document.addEventListener("keyup", function(e) {
                  if (e.keyCode == code) {
                      f(false)();
                  }
              }, false);
          }
      }
  }
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
    "use strict";              

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["Main"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];        
  var update = function (inputs) {
      return function (v) {
          var moveIf = function (keyDown) {
              return function (dx) {
                  return function (dy) {
                      return function (p) {
                          if (keyDown) {
                              var $25 = {};
                              for (var $26 in p) {
                                  if (p.hasOwnProperty($26)) {
                                      $25[$26] = p[$26];
                                  };
                              };
                              $25.x = p.x + dx;
                              $25.y = p.y + dy;
                              return $25;
                          };
                          if (!keyDown) {
                              return p;
                          };
                          throw new Error("Failed pattern match at Main line 61, column 34 - line 63, column 43: " + [ keyDown.constructor.name ]);
                      };
                  };
              };
          };
          var player$prime = (function ($60) {
              return moveIf(inputs.right)(2.0)(0.0)(moveIf(inputs.left)(-2.0)(0.0)(moveIf(inputs.down)(0.0)(2.0)($60)));
          })(moveIf(inputs.up)(0.0)(-2.0)(v.player));
          var $27 = {};
          for (var $28 in v) {
              if (v.hasOwnProperty($28)) {
                  $27[$28] = v[$28];
              };
          };
          $27.player = player$prime;
          return $27;
      };
  };
  var screenSize = {
      width: 800.0, 
      height: 600.0
  };
  var newCoin = function (v) {
      return function __do() {
          var v1 = Control_Monad_Eff_Random.randomRange(0.0)(v.width)();
          var v2 = Control_Monad_Eff_Random.randomRange(0.0)(v.height)();
          return {
              x: v1, 
              y: v2
          };
      };
  };
  var initialPlayer = {
      x: 0.0, 
      y: 0.0
  };
  var initialInputState = {
      up: false, 
      down: false, 
      left: false, 
      right: false
  };
  var initialGameState = function __do() {
      var v = newCoin(screenSize)();
      return {
          player: initialPlayer, 
          coin: v
      };
  };
  var drawPlayer = function (ctx) {
      return function (v) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
              Graphics_Canvas.setFillStyle("#F00")(ctx)();
              return Graphics_Canvas.fillRect(ctx)({
                  x: v.x, 
                  y: v.y, 
                  w: 32.0, 
                  h: 32.0
              })();
          });
      };
  };
  var drawCoin = function (ctx) {
      return function (v) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
              Graphics_Canvas.setFillStyle("#BB2")(ctx)();
              Graphics_Canvas.arc(ctx)({
                  x: v.x, 
                  y: v.y, 
                  r: 16.0, 
                  start: 0.0, 
                  end: 2.0 * $$Math.pi
              })();
              return Graphics_Canvas.fill(ctx)();
          });
      };
  };
  var clearCanvas = function (ctx) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
          Graphics_Canvas.setFillStyle("rgba(50, 50, 50, 0.3)")(ctx)();
          return Graphics_Canvas.fillRect(ctx)({
              x: 0.0, 
              y: 0.0, 
              w: screenSize.width, 
              h: screenSize.height
          })();
      });
  };
  var main = Data_Function.apply(Data_Functor["void"](Control_Monad_Eff.functorEff))(Data_Function.apply(Partial_Unsafe.unsafePartial)(function (dictPartial) {
      return function __do() {
          var v = Graphics_Canvas.getCanvasElementById("gamecanvas")();
          var __unused = function (dictPartial1) {
              return function ($dollar19) {
                  return $dollar19;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_Maybe.Just) {
                  return function __do() {
                      Graphics_Canvas.setCanvasDimensions(screenSize)(v.value0)();
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      var v2 = initialGameState();
                      var v3 = Control_Monad_Eff_Ref.newRef(v2)();
                      var v4 = Control_Monad_Eff_Ref.newRef(initialInputState)();
                      $foreign.onKeyChange(87)(function (pressed) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Ref.modifyRef(v4)(function (v5) {
                              var $49 = {};
                              for (var $50 in v5) {
                                  if (v5.hasOwnProperty($50)) {
                                      $49[$50] = v5[$50];
                                  };
                              };
                              $49.up = pressed;
                              return $49;
                          }));
                      })();
                      $foreign.onKeyChange(83)(function (pressed) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Ref.modifyRef(v4)(function (v5) {
                              var $51 = {};
                              for (var $52 in v5) {
                                  if (v5.hasOwnProperty($52)) {
                                      $51[$52] = v5[$52];
                                  };
                              };
                              $51.down = pressed;
                              return $51;
                          }));
                      })();
                      $foreign.onKeyChange(65)(function (pressed) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Ref.modifyRef(v4)(function (v5) {
                              var $53 = {};
                              for (var $54 in v5) {
                                  if (v5.hasOwnProperty($54)) {
                                      $53[$54] = v5[$54];
                                  };
                              };
                              $53.left = pressed;
                              return $53;
                          }));
                      })();
                      $foreign.onKeyChange(68)(function (pressed) {
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Ref.modifyRef(v4)(function (v5) {
                              var $55 = {};
                              for (var $56 in v5) {
                                  if (v5.hasOwnProperty($56)) {
                                      $55[$56] = v5[$56];
                                  };
                              };
                              $55.right = pressed;
                              return $55;
                          }));
                      })();
                      var loop = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                          var v5 = Control_Monad_Eff_Ref.readRef(v3)();
                          var v6 = Control_Monad_Eff_Ref.readRef(v4)();
                          var nextState = update(v6)(v5);
                          clearCanvas(v1)();
                          drawPlayer(v1)(nextState.player)();
                          drawCoin(v1)(nextState.coin)();
                          Control_Monad_Eff_Ref.writeRef(v3)(nextState)();
                          return $foreign.requestAnimationFrame(loop)();
                      });
                      return $foreign.requestAnimationFrame(loop)();
                  };
              };
              throw new Error("Failed pattern match at Main line 89, column 8 - line 124, column 27: " + [ v.constructor.name ]);
          })())();
      };
  }));
  exports["clearCanvas"] = clearCanvas;
  exports["drawCoin"] = drawCoin;
  exports["drawPlayer"] = drawPlayer;
  exports["initialGameState"] = initialGameState;
  exports["initialInputState"] = initialInputState;
  exports["initialPlayer"] = initialPlayer;
  exports["main"] = main;
  exports["newCoin"] = newCoin;
  exports["screenSize"] = screenSize;
  exports["update"] = update;
  exports["onKeyChange"] = $foreign.onKeyChange;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
